{"version":3,"sources":["assets/rseq-sounds/bass/bass1.mp3","assets/rseq-sounds/bd/bd1.mp3","assets/rseq-sounds/bd/bd2.mp3","assets/rseq-sounds/bd/bd3.mp3","assets/rseq-sounds/bd/bd4.mp3","assets/rseq-sounds/bd/bd5.mp3","assets/rseq-sounds/bd/bd6.mp3","assets/rseq-sounds/bd/bdweird1.mp3","assets/rseq-sounds/bd/bdweird2.mp3","assets/rseq-sounds/bd/bdweird3.mp3","assets/rseq-sounds/bd/bdweird4.mp3","assets/rseq-sounds/perc/perc1.mp3","assets/rseq-sounds/perc/perc2.mp3","assets/rseq-sounds/perc/perc3.mp3","assets/rseq-sounds/patt/patt1.mp3","assets/rseq-sounds/patt/patt2.mp3","assets/rseq-sounds/patt/patt3.mp3","assets/rseq-sounds/patt/patt4.mp3","components/TrackStyles.js","components/MakeFunctions.js","components/Visualizer.js","components/Buttons.js","components/HelperFunctions.js","App.js","index.js"],"names":["StopIcon","icon","faStop","PlayIcon","faPlay","RightArrow","faArrowRight","LeftArrow","faArrowLeft","PlusIcon","faPlus","MinusIcon","faMinus","TrackBtnContainer","styled","div","props","isTrackOrMute","css","spin","keyframes","TrackBtnStyle","button","borderColor","trackKey","isActive","trackSelectColor","inputColor","TrackInfoPane","TrackInfoStyle","RemoveButton","makeTracks","samples","column","map","val","group","name","makePlayer","sample","Tone","style","display","width","height","Visualizer","wave","setup","p5","canvasParentRef","createCanvas","parent","draw","background","stroke","noFill","strokeWeight","buffer","current","getValue","start","i","length","end","x1","y1","x2","y2","line","TrackSelectButton","handleRemoveTrack","trackIndex","rest","className","onClick","classNames","TrackInfo","sampleLeft","sampleRight","handleGroupSelect","id","flex","justifyContent","TrackGroup","DropdownButton","title","ModalBody","color","TrackMuteButton","SampleButton","RepeatableBtn","minusOrPlus","tag","type","onHold","onRelease","handleUpdate","tracks","grid","tracksSelect","tracksMute","trackClicked","newGrid","cell","cellIndex","cellCopy","newTrackActive","track","trackCopy","newTracksMute","sampleRef","bass","BS1","bass1","bd","BD1","bd1","BD2","bd2","BD3","bd3","BD4","bd4","BD5","bd5","BD6","bd6","BD7","bd7","BD8","bd8","BD9","bd9","BD10","bd10","perc","PC1","perc1","PC2","perc2","PC3","perc3","patt","PT1","patt1","PT2","patt2","PT3","patt3","PT4","patt4","App","useState","setTitle","useRef","trackChannels","track0","toDestination","connect","track1","track2","track3","Object","keys","push","makeGrid","setGrid","setTracksMute","setTracksSelect","isPlaying","setIsPlaying","currentColumn","setCurrentColumn","sequencer","steps","seqSteps","Array","fill","v","emptySeq","sequence","bpm","value","setBpm","handleInputColor","handleTrackSelectColor","handleBorderColor","selectedGroup","update","values","active","obj","keyValues","key","index","newKey","assign","renameKeys","splice","newColumn","handleBpm","addOrSub","prevState","playMusic","a","stop","clear","dispose","time","columnIndex","forEach","fontWeight","onChange","e","target","newTracksSelect","handleTrackClick","mute","handleTrackMute","sampleIndex","columnClicked","sampleClicked","handleSampleClick","handleAddTrack","indexOf","handleSampleLeft","handleSampleRight","rootElement","document","getElementById","ReactDOM","render"],"mappings":"6RAAe,MAA0B,kCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,kCCA1B,MAA0B,kCCA1B,MAA0B,kCCA1B,MAA0B,kCCA1B,MAA0B,kCCA1B,MAA0B,kCCA1B,MAA0B,kC,uCCWnCA,EAAW,cAAC,IAAD,CAAiBC,KAAMC,MAClCC,EAAW,cAAC,IAAD,CAAiBF,KAAMG,MAClCC,EAAa,cAAC,IAAD,CAAiBJ,KAAMK,MACpCC,EAAY,cAAC,IAAD,CAAiBN,KAAMO,MACnCC,EAAW,cAAC,IAAD,CAAiBR,KAAMS,MAClCC,EAAY,cAAC,IAAD,CAAiBV,KAAMW,MAEnCC,EAAoBC,IAAOC,IAAV,kHAInB,SAACC,GAAD,OACAA,EAAMC,eACNC,YADA,6WAemBC,MAMjBA,EAAOC,YAAH,kKASJC,EAAgBP,IAAOQ,OAAV,6GAIf,SAACN,GAAD,OAAWA,EAAMO,eAEjB,SAACP,GACD,OAAIA,EAAMC,cACF,8IAAN,OAMgBD,EAAMQ,SANtB,yNAeIR,EAAMS,UAAN,UAAqBT,EAAMU,kBAf/B,YAkBM,mEAAN,OAGcV,EAAMS,SAAW,MAAQ,MAHvC,+BAIaT,EAAMS,SAAW,OAAS,MAJvC,gGAOwBT,EAAMW,YAAc,QAP5C,mQAgBwBX,EAAMW,YAAc,QAhB5C,4FAoBaX,EAAMS,SAAW,OAAS,MApBvC,2BA2BAG,GAAgBd,IAAOC,IAAV,8CAIbc,GAAiBf,IAAOC,IAAV,wGAOde,GAAehB,IAAOQ,OAAV,gcClGlB,SAASS,GAAWC,GAA4B,IAAnBP,EAAkB,wDACzCQ,EAASD,EAAQE,KAAI,SAACC,GACxB,MAAO,CACLV,SAAUA,EACVW,MAAOD,EAAIC,MACXC,KAAMF,EAAIE,SAGd,OAAOJ,EAGT,SAASK,GAAWC,GAElB,OADe,IAAIC,IAAYD,G,iCC5B3BE,GAAQ,CAAEC,QAAS,OAAQC,MAAO,OAAQC,OAAQ,QAEzC,SAASC,GAAT,GAA2C,IAArBlB,EAAoB,EAApBA,WAAYmB,EAAQ,EAARA,KAiC/C,OAAO,cAAC,KAAD,CAAQC,MAhCD,SAACC,EAAIC,GACjBD,EAAGE,aAAa,IAAK,KAAKC,OAAOF,GAAiBR,MAAM,QAAS,SA+BtCW,KA5BhB,SAACJ,GACZA,EAAGK,WAAW1B,GACdqB,EAAGM,OAAO,WACVN,EAAGO,SACHP,EAAGQ,aAAa,GAMhB,IAJA,IAAIC,EAASX,EAAKY,QAAQC,WACtBC,EAAQ,EAGHC,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IACjC,GAAIJ,EAAOI,EAAI,GAAK,GAAKJ,EAAOI,IAAM,EAAG,CACvCD,EAAQC,EACR,MAKJ,IADA,IAAIE,EAAMH,EAAQH,EAAOK,OAAS,EACzBD,EAAID,EAAOC,EAAIJ,EAAOK,OAAQD,IAAK,CAC1C,IAAIG,EAAKhB,EAAGd,IAAI2B,EAAI,EAAGD,EAAOG,EAAK,EAAGf,EAAGL,OACrCsB,EAAKjB,EAAGd,IAAIuB,EAAOI,EAAI,IAAK,EAAG,EAAG,EAAGb,EAAGJ,QAExCsB,EAAKlB,EAAGd,IAAI2B,EAAGD,EAAOG,EAAK,EAAGf,EAAGL,OACjCwB,EAAKnB,EAAGd,IAAIuB,EAAOI,IAAK,EAAG,EAAG,EAAGb,EAAGJ,QACxCI,EAAGoB,KAAKJ,EAAIC,EAAIC,EAAIC,KAIiB1B,MAAOA,K,6QCzB5C4B,GAAoB,SAAC,GAWrB,EAVJ9B,OAUK,IATLd,EASI,EATJA,SACAW,EAQI,EARJA,MACAT,EAOI,EAPJA,WACAD,EAMI,EANJA,iBACAH,EAKI,EALJA,YACAC,EAII,EAJJA,SACA8C,EAGI,EAHJA,kBACAC,EAEI,EAFJA,WACGC,EACC,mBACJ,OACE,sBAAKC,UAAU,4BAAf,UACE,cAAC3C,GAAD,CAAc4C,QAAS,kBAAMJ,EAAkBC,IAA/C,SACG5D,IAEH,cAACU,EAAD,aACEoD,UAAWE,IACT,iBACA,CAAE,aAAwB,SAAVvC,GAChB,CAAE,cAAyB,OAAVA,GACjB,CAAE,cAAyB,SAAVA,GACjB,CAAE,cAAyB,SAAVA,GALE,UAMhBA,EAAQ,WAEbT,WAAYA,EAAWS,GACvBV,iBAAkBA,EAAiBU,GACnCb,YAAaA,EAAYa,GACzBX,SAAUA,EACVR,eAAe,EACfO,SAAUA,GACNgD,QAMNI,GAAY,SAAC,GAWZ,IAVLvC,EAUI,EAVJA,KACAZ,EASI,EATJA,SACAW,EAQI,EARJA,MACAT,EAOI,EAPJA,WACAH,EAMI,EANJA,SACAsB,EAKI,EALJA,KACA+B,EAII,EAJJA,WACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,kBACAR,EACI,EADJA,WAEA,OAAI9C,EAEA,eAACI,GAAD,CACEF,WAAYA,EAAWS,GACvBX,SAAUA,EAFZ,UAIE,sBAAKuD,GAAG,wBAAR,UACE,cAAC,GAAD,CACED,kBAAmBA,EACnB1C,KAAMA,EACNb,SAAUA,EACV+C,WAAYA,IAEd,sBACEE,UAAU,SACVhC,MAAO,CAAEwC,KAAM,IAAKC,eAAgB,YAFtC,UAIE,wBAAQT,UAAU,MAAMO,GAAG,cAAcN,QAASG,EAAlD,SACGtE,IAEH,wBAAQkE,UAAU,MAAMO,GAAG,eAAeN,QAASI,EAAnD,SACGzE,UAIP,cAACwC,GAAD,CAAYlB,WAAYA,EAAWS,GAAQU,KAAMA,OAI9C,MAILqC,GAAa,SAAC,GAAuD,IAArDJ,EAAoD,EAApDA,kBAAmB1C,EAAiC,EAAjCA,KAAMb,EAA2B,EAA3BA,SAAU+C,EAAiB,EAAjBA,WACvD,OACE,mCACE,cAACa,GAAA,EAAD,CACEJ,GAAI,qBACJK,MAAOhD,EAAO,UAAYb,EAF5B,SAIE,eAAC8D,GAAA,EAAD,CACEb,UAAU,gCACVO,GAAI,oBAFN,UAIE,wBACEP,UAAU,kEACVhC,MAAO,CAAEG,OAAQ,OAAQD,MAAO,SAChC+B,QAAS,WACPK,EAAkB,OAAQR,IAJ9B,kBASA,wBACEE,UAAU,mEACVhC,MAAO,CAAEG,OAAQ,OAAQD,MAAO,SAChC+B,QAAS,WACPK,EAAkB,KAAMR,IAJ5B,uBASA,wBACEE,UAAU,mEACVhC,MAAO,CAAEG,OAAQ,OAAQD,MAAO,QAAS4C,MAAO,SAChDb,QAAS,WACPK,EAAkB,OAAQR,IAJ9B,wBASA,wBACEE,UAAU,mEACVhC,MAAO,CAAEG,OAAQ,OAAQD,MAAO,SAChC+B,QAAS,WACPK,EAAkB,OAAQR,IAJ9B,6BAeJiB,GAAkB,SAAC,GAMlB,IALL/D,EAKI,EALJA,SACAW,EAII,EAJJA,MACAT,EAGI,EAHJA,WACAJ,EAEI,EAFJA,YACGiD,EACC,mBACJ,OACE,cAACnD,EAAD,aACEoD,UAAWE,IACT,wBACA,CAAE,aAAwB,SAAVvC,GAChB,CAAE,cAAyB,OAAVA,GACjB,CAAE,cAAyB,SAAVA,GACjB,CAAE,cAAyB,SAAVA,GALE,UAMhBA,EAAQ,UAEbT,WAAYA,EAAWS,GACvBb,YAAaA,EAAYa,GACzBX,SAAUA,EACVR,eAAe,GACXuD,KAKJiB,GAAe,SAAC,GAAkC,IAAhChE,EAA+B,EAA/BA,SAAUW,EAAqB,EAArBA,MAAUoC,EAAW,mBACrD,OACE,oCACEC,UAAWE,IACT,iBACA,CAAE,qBAAgC,SAAVvC,GACxB,CAAE,sBAAiC,OAAVA,GACzB,CAAE,sBAAiC,SAAVA,GACzB,CAAE,sBAAiC,SAAVA,GACzB,CAAE,aAAcX,GAAsB,SAAVW,GAC5B,CAAE,cAAeX,GAAsB,OAAVW,GAC7B,CAAE,cAAeX,GAAsB,SAAVW,GAC7B,CAAE,cAAeX,GAAsB,SAAVW,KAE3BoC,KAKJkB,GAAgB,SAAC,GAAwC,IAAtChB,EAAqC,EAArCA,QAASiB,EAA4B,EAA5BA,YAAgB3E,EAAY,mBAC5D,OACE,cAAC,KAAD,aACE4E,IAAI,SACJC,KAAK,SACLC,OAAQ,WACQpB,IAAdiB,IAEFI,UAAW,WACKrB,IAAdiB,KAEE3E,K,SC7MV,SAASgF,GAAaC,EAAQC,EAAMC,EAAcC,EAAYC,GA8B5D,MAAO,CACLC,QA7BQJ,EAAKhE,KAAI,SAACD,GAAD,OACjBA,EAAOC,KAAI,SAACqE,EAAMC,GAChB,IAAIC,EAAQ,eAAQF,GAMpB,OALIC,IAAcH,IAChBI,EAASlE,OAAS0D,EAAOvC,QAAQ2C,GAAc9D,OAC/CkE,EAASpE,KAAO4D,EAAOvC,QAAQ2C,GAAchE,KAC7CoE,EAASrE,MAAQ6D,EAAOvC,QAAQ2C,GAAcjE,OAEzCqE,QAsBTC,eAnBeP,EAAajE,KAAI,SAACyE,GACjC,IAAIC,EAAS,eAAQD,GAKrB,OAJIC,EAAUnF,WACZmF,EAAUvE,KAAO4D,EAAOvC,QAAQ2C,GAAchE,KAC9CuE,EAAUxE,MAAQ6D,EAAOvC,QAAQ2C,GAAcjE,OAE1CwE,KAcPC,cAZcT,EAAWlE,KAAI,SAACyE,EAAOpC,GACrC,IAAIqC,EAAS,eAAQD,GAKrB,OAJIpC,IAAe8B,IACjBO,EAAUvE,KAAO4D,EAAOvC,QAAQ2C,GAAchE,KAC9CuE,EAAUxE,MAAQ6D,EAAOvC,QAAQ2C,GAAcjE,OAE1CwE,MCeX,IAAME,GAAY,CAChBC,KAAM,CAAEC,IAAKC,GACbC,GAAI,CACFC,IAAKC,EACLC,IAAKC,EACLC,IAAKC,EACLC,IAAKC,EACLC,IAAKC,EACLC,IAAKC,EACLC,IAAKC,EACLC,IAAKC,EACLC,IAAKC,EACLC,KAAMC,GAERC,KAAM,CAAEC,IAAKC,EAAOC,IAAKC,EAAOC,IAAKC,GACrCC,KAAM,CAAEC,IAAKC,EAAOC,IAAKC,EAAOC,IAAKC,EAAOC,IAAKC,IAGpC,SAASC,KACtB,MAA0BC,mBAAS,cAAnC,mBAAOnE,EAAP,KAAcoE,EAAd,KAEM3G,EAAO4G,mBACR5G,EAAKY,UAASZ,EAAKY,QAAU,IAAIlB,KAEtC,IAAMmH,EAAgBD,mBACjBC,EAAcjG,UACjBiG,EAAcjG,QAAU,CACtBkG,QAAQ,IAAIpH,KAAeqH,gBAAgBC,QAAQhH,EAAKY,SACxDqG,QAAQ,IAAIvH,KAAeqH,gBAAgBC,QAAQhH,EAAKY,SACxDsG,QAAQ,IAAIxH,KAAeqH,gBAAgBC,QAAQhH,EAAKY,SACxDuG,QAAQ,IAAIzH,KAAeqH,gBAAgBC,QAAQhH,EAAKY,WAG5D,IAAMuC,EAASyD,mBACVzD,EAAOvC,UACVuC,EAAOvC,QAAU,CACf,CACEtB,MAAO,OACPG,OAAQD,GAAWwE,GAAUC,KAAKC,KAAK8C,QACrCH,EAAcjG,QAAQkG,QAExBvH,KAAM6H,OAAOC,KAAKrD,GAAUC,MAAM,IAEpC,CACE3E,MAAO,KACPG,OAAQD,GAAWwE,GAAUI,GAAGC,KAAK2C,QACnCH,EAAcjG,QAAQqG,QAExB1H,KAAM6H,OAAOC,KAAKrD,GAAUI,IAAI,IAElC,CACE9E,MAAO,OACPG,OAAQD,GAAWwE,GAAUyB,KAAKC,KAAKsB,QACrCH,EAAcjG,QAAQsG,QAExB3H,KAAM6H,OAAOC,KAAKrD,GAAUyB,MAAM,IAEpC,CACEnG,MAAO,OACPG,OAAQD,GAAWwE,GAAUgC,KAAKC,KAAKe,QACrCH,EAAcjG,QAAQuG,QAExB5H,KAAM6H,OAAOC,KAAKrD,GAAUgC,MAAM,MAGxC,MAAwBU,mBJxG1B,SAAkBxH,GAEhB,IADA,IAAMkE,EAAO,GACJrC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAI5B,EAASD,EAAQE,KAAI,SAACC,GACxB,MAAO,CACLI,OAAQJ,EAAII,OACZd,UAAU,EACVW,MAAOD,EAAIC,MACXC,KAAMF,EAAIE,SAGd6D,EAAKkE,KAAKnI,GAEZ,OAAOiE,EI2F0BmE,CAASpE,EAAOvC,UAAjD,mBAAOwC,EAAP,KAAaoE,EAAb,KACA,EAAoCd,mBAClCzH,GAAWkE,EAAOvC,SAAS,IAD7B,mBAAO0C,EAAP,KAAmBmE,EAAnB,KAGA,EAAwCf,mBACtCzH,GAAWkE,EAAOvC,SAAS,IAD7B,mBAAOyC,EAAP,KAAqBqE,EAArB,KAGA,EAAkChB,oBAAS,GAA3C,mBAAOiB,EAAP,KAAkBC,EAAlB,KACA,EAA0ClB,mBAAS,MAAnD,mBAAOmB,EAAP,KAAsBC,EAAtB,KACMC,EAAYnB,iBAAO,MACzB,EAA0BF,mBAAS,IAAnC,mBAAOsB,EAAP,KACMC,GADN,KACiBC,MAAMF,GACpBG,KAAK,MACL/I,KAAI,SAACgJ,EAAGrH,GAAJ,OAAUA,MACbsH,EAAWH,MAAMF,GAClBG,KAAK,MACL/I,KAAI,SAACgJ,EAAGrH,GAAJ,MAAU,MAGbuH,EAAW1B,iBAAOyB,GACtB,EAAsB3B,mBAAShH,IAAe6I,IAAIC,OAAlD,mBAAOD,EAAP,KAAYE,EAAZ,KAOMC,EAAmB,SAACpJ,GACxB,MAAc,SAAVA,EACK,UACY,OAAVA,EACF,UACY,SAAVA,EACF,UACY,SAAVA,EACF,UAEA,SAILqJ,EAAyB,SAACrJ,GAC9B,MAAc,SAAVA,EACK,4DACY,OAAVA,EACF,6DACY,SAAVA,EACF,6DACY,SAAVA,EACF,6DAEA,SAILsJ,GAAoB,SAACtJ,GACzB,MAAc,SAAVA,EACK,0DACY,OAAVA,EACF,0DACY,SAAVA,EACF,0DACY,SAAVA,EACF,0DAEA,SA2LL2C,GAAoB,SAAC4G,EAAetF,GACxC,IAAIC,EAASI,EAAgBG,EAAe+E,EAE5C3F,EAAOvC,QAAQ2C,GAAgB,CAC7BjE,MAAOuJ,EACPpJ,OAAQD,GAAW4H,OAAO2B,OAAO/E,GAAU6E,IAAgB,IAAI7B,QAC7DH,EAAcjG,QAAQ,QAAU2C,IAElChE,KAAM6H,OAAOC,KAAKrD,GAAU6E,IAAgB,IAI9CrF,GADAsF,EAAS5F,GAAaC,EAAQC,EAAMC,EAAcC,EAAYC,IAC7CC,QACjBI,EAAiBkF,EAAOlF,eACxBG,EAAgB+E,EAAO/E,cAEvBuE,EAAS1H,QAAU,GACnB4C,EAAQpE,KAAI,SAACD,GACX,IAAI6J,EAAS,GAIb,OAHA7J,EAAOC,KAAI,SAACqE,GACV,OAAOA,EAAK9E,UAAYqK,EAAO1B,KAAK7D,EAAKhE,WAEpC6I,EAAS1H,QAAQ0G,KAAK0B,MAG/BxB,EAAQhE,GACRkE,EAAgB9D,GAChB6D,EAAc1D,IAqDVvC,GAAoB,SAAC+B,GACzB,IAAIC,EAASI,EAAgBG,SAEtB8C,EAAcjG,QAAQ,QAAU2C,GACvCsD,EAAcjG,QDhZlB,SAAoBqI,GAClB,IAAMC,EAAY9B,OAAOC,KAAK4B,GAAK7J,KAAI,SAAC+J,EAAKC,GAC3C,IAAMC,EAAS,QAAUD,IAASD,EAClC,OAAO,gBAAGE,EAASJ,EAAIE,OAEzB,OAAO/B,OAAOkC,OAAP,MAAAlC,OAAM,CAAQ,IAAR,mBAAe8B,KC2YFK,CAAW1C,EAAcjG,SAEjDuC,EAAOvC,QAAQ4I,OAAOjG,EAAc,GAEpCC,EAAUJ,EAAKhE,KAAI,SAACD,GAClB,IAAIsK,EAAS,YAAOtK,GAEpB,OADAsK,EAAUD,OAAOjG,EAAc,GACxBkG,MAGT7F,EAAc,YAAOP,IACNmG,OAAOjG,EAAc,IAEpCQ,EAAa,YAAOT,IACNkG,OAAOjG,EAAc,GAEnC+E,EAAS1H,QAAU,GACnB4C,EAAQpE,KAAI,SAACD,GACX,IAAI6J,EAAS,GAIb,OAHA7J,EAAOC,KAAI,SAACqE,GACV,OAAOA,EAAK9E,UAAYqK,EAAO1B,KAAK7D,EAAKhE,WAEpC6I,EAAS1H,QAAQ0G,KAAK0B,MAG/BxB,EAAQhE,GACRkE,EAAgB9D,GAChB6D,EAAc1D,IAGV2F,GAAY,SAACC,GACbA,EACEpB,EAAM,KACRE,GAAO,SAACmB,GAAD,OAAeA,EAAY,KAGhCrB,EAAM,GACRE,GAAO,SAACmB,GAAD,OAAeA,EAAY,KAGtClK,IAAe6I,IAAIC,MAAQD,GAGvBsB,GAAS,uCAAG,sBAAAC,EAAA,0DACZnC,EADY,wBAEdC,GAAa,GACbE,EAAiB,MAHH,SAIRpI,IAAeqK,OAJP,uBAKRhC,EAAUnH,QAAQmJ,OALV,uBAMRhC,EAAUnH,QAAQoJ,QANV,wBAORjC,EAAUnH,QAAQqJ,UAPV,iDAUhBlC,EAAUnH,QAAU,IAAIlB,KACtB,SAACwK,EAAMC,GACLrC,EAAiBqC,GACjB7B,EAAS1H,QAAQuJ,GAAaC,SAAQ,SAAChC,GACrC,OAAOA,EAAEtH,MAAMoJ,EAAM,QAGzBjC,EACA,OAEFL,GAAa,GApBG,UAqBVlI,MArBU,yBAsBVA,IAAeoB,QAtBL,yBAuBViH,EAAUnH,QAAQE,QAvBR,4CAAH,qDA0Bf,OACE,qBAAKa,UAAU,MAAf,SACE,sBAAKO,GAAG,YAAR,UACE,sBAAKA,GAAG,oBAAR,UACE,uBACEa,KAAK,OACLxD,KAAK,QACL2C,GAAG,QACHsG,MAAOjG,EACP5C,MAAO,CAAE0K,WAAY,OACrBC,SAzYgB,SAACC,GACzB5D,EAAS4D,EAAEC,OAAOhC,UA0YZ,wBACE7G,UAAU,qEACVO,GAAI,cACJN,QAAS,kBAAMiI,MAHjB,SAKGlC,EAAYzK,EAAWG,IAE1B,sBAAK6E,GAAG,gBAAR,UACE,oBAAGP,UAAU,MAAMO,GAAI,YAAvB,iBACOqG,KAEP,sBAAKrG,GAAI,wBAAT,UACE,cAAC,GAAD,CACEW,aAAa,EACbjB,QAAS8H,GACT/H,UAAW,sBACXO,GAAI,eAJN,SAMGrE,IAEH,cAAC,GAAD,CACEgF,aAAa,EACbjB,QAAS8H,GACT/H,UAAW,sBACXO,GAAI,eAJN,SAMGvE,aAKT,sBAAKuE,GAAG,mBAAR,UACE,cAACnE,EAAD,CAAmBI,eAAe,EAAlC,SACGkF,EAAajE,KAAI,WAA8BqC,GAA9B,IAAGhC,EAAH,EAAGA,OAAQd,EAAX,EAAWA,SAAUW,EAArB,EAAqBA,MAArB,OAChB,cAAC,GAAD,CACEG,OAAQA,EACRH,MAAOA,EACPX,SAAUA,EACVE,WAAY6J,EACZ9J,iBAAkB+J,EAClBlK,YAAamK,GACbhH,QAAS,kBArYE,SAAC2B,EAAcjE,GACtC,IAOImL,EAPmBpH,EAAajE,KAAI,SAACyE,EAAOpC,GAC9C,IAAIqC,EAAS,eAAQD,GAIrB,OAHIC,EAAUnF,WACZmF,EAAUnF,UAAW,GAEhBmF,KAE8B1E,KAAI,SAACyE,EAAOpC,GACjD,IAAIqC,EAAS,eAAQD,GAIrB,OAHIpC,IAAe8B,IACjBO,EAAUnF,UAAYkF,EAAMlF,UAEvBmF,KAET4D,EAAgB+C,GAsXWC,CAAiBjJ,IAEhC/C,SAAU+C,EAAa,EACvBD,kBAAmBA,GACnBC,WAAYA,GAHPnC,EAAQ,SAAWmC,QAO9B,cAAC1D,EAAD,CAAmB4D,UAAU,OAA7B,SACG2B,EAAWlE,KAAI,WAA8BqC,GAA9B,IAAGhC,EAAH,EAAGA,OAAQd,EAAX,EAAWA,SAAUW,EAArB,EAAqBA,MAArB,OACd,cAAC,GAAD,CACEG,OAAQA,EACRH,MAAOA,EACPX,SAAUA,EACVE,WAAY6J,EACZjK,YAAamK,GACbhH,QAAS,kBA1QC,SAAC2B,EAAcjE,GAIrC,IAAIyE,EAAgBT,EAAWlE,KAAI,SAACyE,EAAOpC,GAEzC,IAAIqC,EAAS,eAAQD,GAIrB,OAHIpC,IAAe8B,IACjBO,EAAUnF,UAAYkF,EAAMlF,UAEvBmF,KAET+C,EAAcjG,QAAQ,QAAU2C,GAAcoH,MAAQ9D,EAAcjG,QAClE,QAAU2C,GACVoH,KACFlD,EAAc1D,GA2Pa6G,CAAgBnJ,KAC1BnC,EAAQ,QAAUmC,QAI5B2B,EAAKhE,KAAI,SAACD,EAAQgL,GAAT,OACR,qBACExI,UAAWE,IAAW,gBAAiB,CACrC,wBAAyBgG,IAAkBsC,IAF/C,SAMGhL,EAAOC,KAAI,WAA8ByL,GAA9B,IAAGpL,EAAH,EAAGA,OAAQd,EAAX,EAAWA,SAAUW,EAArB,EAAqBA,MAArB,OACV,cAAC,GAAD,CACEG,OAAQA,EACRH,MAAOA,EACPX,SAAUA,EACViD,QAAS,kBAxQC,SAACkJ,EAAeC,EAAezL,GAKvD,IAAIkE,EAAUJ,EAAKhE,KAAI,SAACD,EAAQgL,GAAT,OACrBhL,EAAOC,KAAI,SAACqE,EAAMC,GAChB,IAAIC,EAAQ,eAAQF,GAIpB,OAHI0G,IAAgBW,GAAiBpH,IAAcqH,IACjDpH,EAAShF,UAAY8E,EAAK9E,UAErBgF,QAGX2E,EAAS1H,QAAU,GACnB4C,EAAQpE,KAAI,SAACD,GACX,IAAI6J,EAAS,GAIb,OAHA7J,EAAOC,KAAI,SAACqE,GACV,OAAOA,EAAK9E,UAAYqK,EAAO1B,KAAK7D,EAAKhE,WAEpC6I,EAAS1H,QAAQ0G,KAAK0B,MAE/BxB,EAAQhE,GAmPQwH,CAAkBb,EAAaU,KAE5BvL,EAAQ,UAAYuL,OAVxB,gBAAkBV,SAgB7B,qBAAKxI,UAAU,eAAf,SACE,wBACEA,UAAU,qEACVO,GAAG,mBACHN,QAAS,kBA9NI,WACrB,IAAI4B,EAASI,EAAgBG,EAE7B8C,EAAcjG,QACZ,QAAUwG,OAAOC,KAAKR,EAAcjG,SAASI,SAC3C,IAAItB,KAAeqH,gBAAgBC,QAAQhH,EAAKY,SAEpDuC,EAAOvC,QAAQ0G,KAAK,CAClBhI,MAAO,OACPG,OAAQD,GAAWwE,GAAUC,KAAKC,KAAK8C,QACrCH,EAAcjG,QACZ,SAAWwG,OAAOC,KAAKR,EAAcjG,SAASI,OAAS,KAG3DzB,KAAM6H,OAAOC,KAAKrD,GAAUC,MAAM,KAGpCT,EAAUJ,EAAKhE,KAAI,SAACD,GAClB,IAAIsK,EAAS,YAAOtK,GAUpB,OATAsK,EAAUnC,KAAK,CACbhI,MAAO,OACPG,OAAQD,GAAWwE,GAAUC,KAAKC,KAAK8C,QACrCH,EAAcjG,QACZ,SAAWwG,OAAOC,KAAKR,EAAcjG,SAASI,OAAS,KAG3DzB,KAAM6H,OAAOC,KAAKrD,GAAUC,MAAM,KAE7BwF,MAGT7F,EAAc,YAAOP,IACNiE,KAAK,CAClB3I,UAAU,EACVW,MAAO,OACPC,KAAM6H,OAAOC,KAAKrD,GAAUC,MAAM,MAGpCF,EAAa,YAAOT,IACNgE,KAAK,CACjB3I,UAAU,EACVW,MAAO,OACPC,KAAM6H,OAAOC,KAAKrD,GAAUC,MAAM,KAGpCuD,EAAQhE,GACRkE,EAAgB9D,GAChB6D,EAAc1D,GA+KSkH,IAHjB,SAKGtN,MAGL,cAACmB,GAAD,UACGuE,EAAajE,KAAI,WAA4BqC,GAA5B,IAAG9C,EAAH,EAAGA,SAAUW,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,KAApB,OAChB,cAAC,GAAD,CACEA,KAAMA,EACNZ,SAAUA,EACVW,MAAOA,EACPT,WAAY6J,EAEZhK,SAAU+C,EAAa,EACvBzB,KAAMA,EACN+B,WAAY,kBAhbC,SAACxC,EAAMD,EAAOiE,GACrC,IAAIC,EAASI,EAAgBG,EAAe+E,EACtCzB,EAAOD,OAAOC,KAAKrD,GAAU1E,IAC7ByJ,EAAS3B,OAAO2B,OAAO/E,GAAU1E,IAEnC+H,EAAK6D,QAAQ3L,IAAS,GAAK8H,EAAK6D,QAAQ3L,GAAQ,GAAK,GACvD4D,EAAOvC,QAAQ2C,GAAgB,CAC7BjE,MAAOA,EACPG,OAAQD,GAAWuJ,EAAO1B,EAAK6D,QAAQ3L,GAAQ,IAAIyH,QACjDH,EAAcjG,QAAQ,QAAU2C,IAElChE,KAAM8H,EAAKA,EAAK6D,QAAQ3L,GAAQ,IAUlCiE,GAPAsF,EAAS5F,GACPC,EACAC,EACAC,EACAC,EACAC,IAEeC,QACjBI,EAAiBkF,EAAOlF,eACxBG,EAAgB+E,EAAO/E,gBAEvBZ,EAAOvC,QAAQ2C,GAAgB,CAC7BjE,MAAOA,EACPG,OAAQD,GAAWuJ,EAAO1B,EAAKrG,OAAS,IAAIgG,QAC1CH,EAAcjG,QAAQ,QAAU2C,IAElChE,KAAM8H,EAAKA,EAAKrG,OAAS,IAU3BwC,GAPAsF,EAAS5F,GACPC,EACAC,EACAC,EACAC,EACAC,IAEeC,QACjBI,EAAiBkF,EAAOlF,eACxBG,EAAgB+E,EAAO/E,eAIzBuE,EAAS1H,QAAU,GACnB4C,EAAQpE,KAAI,SAACD,GACX,IAAI6J,EAAS,GAIb,OAHA7J,EAAOC,KAAI,SAACqE,GACV,OAAOA,EAAK9E,UAAYqK,EAAO1B,KAAK7D,EAAKhE,WAEpC6I,EAAS1H,QAAQ0G,KAAK0B,MAG/BxB,EAAQhE,GACRkE,EAAgB9D,GAChB6D,EAAc1D,GAuXcoH,CAAiB5L,EAAMD,EAAOmC,IAChDO,YAAa,kBArXC,SAACzC,EAAMD,EAAOiE,GACtC,IAAIC,EAASI,EAAgBG,EAAe+E,EACtCzB,EAAOD,OAAOC,KAAKrD,GAAU1E,IAC7ByJ,EAAS3B,OAAO2B,OAAO/E,GAAU1E,IAEnC+H,EAAK6D,QAAQ3L,IAAS,GAAK8H,EAAK6D,QAAQ3L,GAAQ,EAAI8H,EAAKrG,QAC3DmC,EAAOvC,QAAQ2C,GAAgB,CAC7BjE,MAAOA,EACPG,OAAQD,GAAWuJ,EAAO1B,EAAK6D,QAAQ3L,GAAQ,IAAIyH,QACjDH,EAAcjG,QAAQ,QAAU2C,IAElChE,KAAM8H,EAAKA,EAAK6D,QAAQ3L,GAAQ,IAUlCiE,GAPAsF,EAAS5F,GACPC,EACAC,EACAC,EACAC,EACAC,IAEeC,QACjBI,EAAiBkF,EAAOlF,eACxBG,EAAgB+E,EAAO/E,gBAGvBZ,EAAOvC,QAAQ2C,GAAgB,CAC7BjE,MAAOA,EACPG,OAAQD,GAAWuJ,EAAO,IAAI/B,QAC5BH,EAAcjG,QAAQ,QAAU2C,IAElChE,KAAM8H,EAAK,IAUb7D,GAPAsF,EAAS5F,GACPC,EACAC,EACAC,EACAC,EACAC,IAEeC,QACjBI,EAAiBkF,EAAOlF,eACxBG,EAAgB+E,EAAO/E,eAIzBuE,EAAS1H,QAAU,GACnB4C,EAAQpE,KAAI,SAACD,GACX,IAAI6J,EAAS,GAIb,OAHA7J,EAAOC,KAAI,SAACqE,GACV,OAAOA,EAAK9E,UAAYqK,EAAO1B,KAAK7D,EAAKhE,WAEpC6I,EAAS1H,QAAQ0G,KAAK0B,MAG/BxB,EAAQhE,GACRkE,EAAgB9D,GAChB6D,EAAc1D,GA2TeqH,CAAkB7L,EAAMD,EAAOmC,IAClDQ,kBAAmBA,GACnBR,WAAYA,GANPnC,EAAQmC,aC1mB3B,IAAM4J,GAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAChF,GAAD,MAEF4E,M","file":"static/js/main.0524f978.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bass1.6b9760b1.mp3\";","export default __webpack_public_path__ + \"static/media/bd1.7bb5d5d5.mp3\";","export default __webpack_public_path__ + \"static/media/bd2.56bdda17.mp3\";","export default __webpack_public_path__ + \"static/media/bd3.7422be23.mp3\";","export default __webpack_public_path__ + \"static/media/bd4.f9d7151b.mp3\";","export default __webpack_public_path__ + \"static/media/bd5.9678db00.mp3\";","export default __webpack_public_path__ + \"static/media/bd6.c342661d.mp3\";","export default __webpack_public_path__ + \"static/media/bdweird1.f5d4bd23.mp3\";","export default __webpack_public_path__ + \"static/media/bdweird2.fe3f8636.mp3\";","export default __webpack_public_path__ + \"static/media/bdweird3.6538aebd.mp3\";","export default __webpack_public_path__ + \"static/media/bdweird4.e0dc87e6.mp3\";","export default __webpack_public_path__ + \"static/media/perc1.caa8f07f.mp3\";","export default __webpack_public_path__ + \"static/media/perc2.0400d03c.mp3\";","export default __webpack_public_path__ + \"static/media/perc3.0607f8e2.mp3\";","export default __webpack_public_path__ + \"static/media/patt1.a98ea9f8.mp3\";","export default __webpack_public_path__ + \"static/media/patt2.a9155d0f.mp3\";","export default __webpack_public_path__ + \"static/media/patt3.fa7e08b9.mp3\";","export default __webpack_public_path__ + \"static/media/patt4.a0bb7d16.mp3\";","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faArrowLeft,\r\n  faArrowRight,\r\n  faPlay,\r\n  faStop,\r\n  faPlus,\r\n  faMinus\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport styled, { css, keyframes } from \"styled-components\";\r\n\r\nconst StopIcon = <FontAwesomeIcon icon={faStop} />;\r\nconst PlayIcon = <FontAwesomeIcon icon={faPlay} />;\r\nconst RightArrow = <FontAwesomeIcon icon={faArrowRight} />;\r\nconst LeftArrow = <FontAwesomeIcon icon={faArrowLeft} />;\r\nconst PlusIcon = <FontAwesomeIcon icon={faPlus} />;\r\nconst MinusIcon = <FontAwesomeIcon icon={faMinus} />;\r\n\r\nconst TrackBtnContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  ${(props) =>\r\n    props.isTrackOrMute &&\r\n    css`\r\n      .btn {\r\n        width: 100px;\r\n        height: 40px;\r\n\r\n        &::before {\r\n          content: \"\";\r\n          width: 140px;\r\n          height: 140px;\r\n          position: absolute;\r\n          top: 170%;\r\n          left: -10%;\r\n          border-radius: 45%;\r\n\r\n          animation: ${spin} 10s linear infinite;\r\n        }\r\n      }\r\n    `}\r\n`;\r\n\r\nconst spin = keyframes`\r\n  0% {\r\n    transform: translate(-50%, -75%) rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: translate(-50%, -75%) rotate(360deg);\r\n  }\r\n`;\r\n\r\nconst TrackBtnStyle = styled.button`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  ${(props) => props.borderColor}\r\n\r\n  ${(props) => {\r\n    if (props.isTrackOrMute) {\r\n      return `\r\n        overflow: hidden;\r\n        &::before {\r\n          background-color: #dedddf;\r\n        }\r\n        &::after {\r\n          content: \"${props.trackKey}\";\r\n          color: #dedddf;\r\n          z-index: 1;\r\n          font-weight: 700;\r\n          font-size: 15px;\r\n          position: absolute;\r\n          bottom: 0;\r\n          right: 10%;\r\n        }\r\n        ${props.isActive && `${props.trackSelectColor}`}\r\n      `;\r\n    } else {\r\n      return `\r\n        &::after {\r\n          content: \"\";\r\n          height: ${props.isActive ? \"6px\" : \"3px\"};\r\n          width: ${props.isActive ? \"23px\" : \"4px\"};\r\n          position: absolute;\r\n          left: 104%;\r\n          background-color: ${props.inputColor || \"black\"};\r\n          transition: width 0.25s ease, height 0.08s ease;\r\n        }\r\n        &::before {\r\n          content: \"\";\r\n          height: 6px;\r\n          width: 7px;\r\n          position: absolute;\r\n          left: -22%;\r\n          background-color: ${props.inputColor || \"black\"};\r\n        }\r\n        &:hover::after {\r\n          height: 3px;\r\n          width: ${props.isActive ? \"23px\" : \"7px\"};\r\n        }\r\n      `;\r\n    }\r\n  }}\r\n`;\r\n\r\nconst TrackInfoPane = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst TrackInfoStyle = styled.div`\r\n  display: flex;\r\n  border-radius: 4px;\r\n  color: #dedddf;\r\n  width: 100%;\r\n`;\r\n\r\nconst RemoveButton = styled.button`\r\n  border: none;\r\n  display: flex;\r\n  color: #dedddf;\r\n  width: 50px;\r\n  height: 40px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 4px;\r\n  background: linear-gradient(145deg, #313131, #292929);\r\n  box-shadow: 2px 2px 2px #2e2e2e, -2px -2px 2px #2e2e2e;\r\n\r\n  &:hover {\r\n    background: linear-gradient(145deg, #211e21, #1c191c);\r\n    box-shadow: 1px 1px 2px #1f1c1f, -1px -1px 2px #1f1c1f;\r\n  }\r\n`;\r\n\r\nexport {\r\n  TrackBtnContainer,\r\n  TrackBtnStyle,\r\n  TrackInfoPane,\r\n  TrackInfoStyle,\r\n  RemoveButton,\r\n  StopIcon,\r\n  PlayIcon,\r\n  RightArrow,\r\n  LeftArrow,\r\n  PlusIcon,\r\n  MinusIcon\r\n};\r\n","import * as Tone from \"tone\";\r\n\r\n// This creates an information grid for each button on the sequencer to have their own info like whether they are active or not\r\nfunction makeGrid(samples) {\r\n  const grid = [];\r\n  for (let i = 0; i < 32; i++) {\r\n    let column = samples.map((val) => {\r\n      return {\r\n        sample: val.sample,\r\n        isActive: false,\r\n        group: val.group,\r\n        name: val.name\r\n      };\r\n    });\r\n    grid.push(column);\r\n  }\r\n  return grid;\r\n}\r\n\r\nfunction makeTracks(samples, isActive = false) {\r\n  let column = samples.map((val) => {\r\n    return {\r\n      isActive: isActive,\r\n      group: val.group,\r\n      name: val.name\r\n    };\r\n  });\r\n  return column;\r\n}\r\n\r\nfunction makePlayer(sample) {\r\n  const player = new Tone.Player(sample);\r\n  return player;\r\n}\r\n\r\nexport { makeGrid, makeTracks, makePlayer };\r\n","import React from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nconst style = { display: \"flex\", width: \"100%\", height: \"auto\" };\r\n\r\nexport default function Visualizer({ inputColor, wave }) {\r\n  const setup = (p5, canvasParentRef) => {\r\n    p5.createCanvas(150, 100).parent(canvasParentRef).style(\"width\", \"100%\");\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    p5.background(inputColor);\r\n    p5.stroke(\"#dedddf\");\r\n    p5.noFill();\r\n    p5.strokeWeight(1);\r\n\r\n    let buffer = wave.current.getValue(); // This returns the waveform of the current time (a snapshot) as an array of values that represent the samples in the waveform (at that current time)\r\n    let start = 0;\r\n    /* We scan through the buffer for a point where its adjacent value is negative while the value itself is positive\r\n    in order to have a trigger point from where p5 draws the line. Basically, have p5 always draw from the 0 point at x1 by returning the index at which the two adjacent samples intersect the zero threshold */\r\n    for (let i = 1; i < buffer.length; i++) {\r\n      if (buffer[i - 1] < 0 && buffer[i] >= 0) {\r\n        start = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    let end = start + buffer.length / 2;\r\n    for (let i = start; i < buffer.length; i++) {\r\n      let x1 = p5.map(i - 1, start, end, 0, p5.width);\r\n      let y1 = p5.map(buffer[i - 1], -1, 1, 0, p5.height);\r\n\r\n      let x2 = p5.map(i, start, end, 0, p5.width);\r\n      let y2 = p5.map(buffer[i], -1, 1, 0, p5.height);\r\n      p5.line(x1, y1, x2, y2);\r\n    }\r\n  };\r\n\r\n  return <Sketch setup={setup} draw={draw} style={style} />;\r\n}\r\n","import {\r\n  TrackBtnStyle,\r\n  TrackInfoStyle,\r\n  RemoveButton,\r\n  RightArrow,\r\n  LeftArrow,\r\n  MinusIcon\r\n} from \"./TrackStyles\";\r\nimport classNames from \"classnames\";\r\nimport Visualizer from \"./Visualizer\";\r\nimport { DropdownButton, ModalBody } from \"react-bootstrap\";\r\nimport Repeatable from \"react-repeatable\";\r\n\r\nconst TrackSelectButton = ({\r\n  sample,\r\n  isActive,\r\n  group,\r\n  inputColor,\r\n  trackSelectColor,\r\n  borderColor,\r\n  trackKey,\r\n  handleRemoveTrack,\r\n  trackIndex,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <div className=\"d-flex align-items-center\">\r\n      <RemoveButton onClick={() => handleRemoveTrack(trackIndex)}>\r\n        {MinusIcon}\r\n      </RemoveButton>\r\n      <TrackBtnStyle\r\n        className={classNames(\r\n          \"btn btn-lg m-1\",\r\n          { \"btn-danger\": group === \"bass\" },\r\n          { \"btn-primary\": group === \"bd\" },\r\n          { \"btn-warning\": group === \"perc\" },\r\n          { \"btn-success\": group === \"patt\" },\r\n          `${group + \"-track\"}`\r\n        )}\r\n        inputColor={inputColor(group)}\r\n        trackSelectColor={trackSelectColor(group)}\r\n        borderColor={borderColor(group)}\r\n        isActive={isActive}\r\n        isTrackOrMute={true}\r\n        trackKey={trackKey}\r\n        {...rest}\r\n      ></TrackBtnStyle>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TrackInfo = ({\r\n  name,\r\n  isActive,\r\n  group,\r\n  inputColor,\r\n  trackKey,\r\n  wave,\r\n  sampleLeft,\r\n  sampleRight,\r\n  handleGroupSelect,\r\n  trackIndex\r\n}) => {\r\n  if (isActive) {\r\n    return (\r\n      <TrackInfoStyle // Takes props from TrackInfo to be passed as props to the styled-component TrackInfoStyle for dynamic styling purposes\r\n        inputColor={inputColor(group)}\r\n        isActive={isActive}\r\n      >\r\n        <div id=\"track-group-container\">\r\n          <TrackGroup\r\n            handleGroupSelect={handleGroupSelect}\r\n            name={name}\r\n            trackKey={trackKey}\r\n            trackIndex={trackIndex}\r\n          ></TrackGroup>\r\n          <div\r\n            className=\"d-flex\"\r\n            style={{ flex: \"1\", justifyContent: \"flex-end\" }}\r\n          >\r\n            <button className=\"btn\" id=\"sample-left\" onClick={sampleLeft}>\r\n              {LeftArrow}\r\n            </button>\r\n            <button className=\"btn\" id=\"sample-right\" onClick={sampleRight}>\r\n              {RightArrow}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <Visualizer inputColor={inputColor(group)} wave={wave} />\r\n      </TrackInfoStyle>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst TrackGroup = ({ handleGroupSelect, name, trackKey, trackIndex }) => {\r\n  return (\r\n    <>\r\n      <DropdownButton\r\n        id={\"track-group-button\"}\r\n        title={name + \" Track \" + trackKey}\r\n      >\r\n        <ModalBody\r\n          className=\"d-flex justify-content-around\"\r\n          id={\"track-group-modal\"}\r\n        >\r\n          <button\r\n            className=\"btn btn-danger d-flex justify-content-center align-items-center\"\r\n            style={{ height: \"40px\", width: \"110px\" }}\r\n            onClick={() => {\r\n              handleGroupSelect(\"bass\", trackIndex);\r\n            }}\r\n          >\r\n            Bass\r\n          </button>\r\n          <button\r\n            className=\"btn btn-primary d-flex justify-content-center align-items-center\"\r\n            style={{ height: \"40px\", width: \"110px\" }}\r\n            onClick={() => {\r\n              handleGroupSelect(\"bd\", trackIndex);\r\n            }}\r\n          >\r\n            Bass Drum\r\n          </button>\r\n          <button\r\n            className=\"btn btn-warning d-flex justify-content-center align-items-center\"\r\n            style={{ height: \"40px\", width: \"110px\", color: \"white\" }}\r\n            onClick={() => {\r\n              handleGroupSelect(\"perc\", trackIndex);\r\n            }}\r\n          >\r\n            Percussion\r\n          </button>\r\n          <button\r\n            className=\"btn btn-success d-flex justify-content-center align-items-center\"\r\n            style={{ height: \"40px\", width: \"110px\" }}\r\n            onClick={() => {\r\n              handleGroupSelect(\"patt\", trackIndex);\r\n            }}\r\n          >\r\n            Pattern\r\n          </button>\r\n        </ModalBody>\r\n      </DropdownButton>\r\n    </>\r\n  );\r\n};\r\n\r\nconst TrackMuteButton = ({\r\n  isActive,\r\n  group,\r\n  inputColor,\r\n  borderColor,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <TrackBtnStyle\r\n      className={classNames(\r\n        \"btn btn-lg m-1 d-flex\",\r\n        { \"btn-danger\": group === \"bass\" },\r\n        { \"btn-primary\": group === \"bd\" },\r\n        { \"btn-warning\": group === \"perc\" },\r\n        { \"btn-success\": group === \"patt\" },\r\n        `${group + \"-mute\"}`\r\n      )}\r\n      inputColor={inputColor(group)}\r\n      borderColor={borderColor(group)}\r\n      isActive={isActive}\r\n      isTrackOrMute={false}\r\n      {...rest}\r\n    ></TrackBtnStyle>\r\n  );\r\n};\r\n\r\nconst SampleButton = ({ isActive, group, ...rest }) => {\r\n  return (\r\n    <button\r\n      className={classNames(\r\n        \"btn btn-lg m-1\",\r\n        { \"btn-outline-danger\": group === \"bass\" },\r\n        { \"btn-outline-primary\": group === \"bd\" },\r\n        { \"btn-outline-warning\": group === \"perc\" },\r\n        { \"btn-outline-success\": group === \"patt\" },\r\n        { \"btn-danger\": isActive && group === \"bass\" },\r\n        { \"btn-primary\": isActive && group === \"bd\" },\r\n        { \"btn-warning\": isActive && group === \"perc\" },\r\n        { \"btn-success\": isActive && group === \"patt\" }\r\n      )}\r\n      {...rest}\r\n    ></button>\r\n  );\r\n};\r\n\r\nconst RepeatableBtn = ({ onClick, minusOrPlus, ...props }) => {\r\n  return (\r\n    <Repeatable\r\n      tag=\"button\"\r\n      type=\"button\"\r\n      onHold={() => {\r\n        minusOrPlus ? onClick(true) : onClick(false);\r\n      }}\r\n      onRelease={() => {\r\n        minusOrPlus ? onClick(true) : onClick(false);\r\n      }}\r\n      {...props}\r\n    ></Repeatable>\r\n  );\r\n};\r\n\r\nexport {\r\n  TrackSelectButton,\r\n  TrackInfo,\r\n  TrackMuteButton,\r\n  SampleButton,\r\n  RepeatableBtn\r\n};\r\n","function handleUpdate(tracks, grid, tracksSelect, tracksMute, trackClicked) {\r\n  let newGrid, newTrackActive, newTracksMute;\r\n  newGrid = grid.map((column) =>\r\n    column.map((cell, cellIndex) => {\r\n      let cellCopy = { ...cell };\r\n      if (cellIndex === trackClicked) {\r\n        cellCopy.sample = tracks.current[trackClicked].sample;\r\n        cellCopy.name = tracks.current[trackClicked].name;\r\n        cellCopy.group = tracks.current[trackClicked].group;\r\n      }\r\n      return cellCopy;\r\n    })\r\n  );\r\n  newTrackActive = tracksSelect.map((track) => {\r\n    let trackCopy = { ...track };\r\n    if (trackCopy.isActive) {\r\n      trackCopy.name = tracks.current[trackClicked].name;\r\n      trackCopy.group = tracks.current[trackClicked].group;\r\n    }\r\n    return trackCopy;\r\n  });\r\n  newTracksMute = tracksMute.map((track, trackIndex) => {\r\n    let trackCopy = { ...track };\r\n    if (trackIndex === trackClicked) {\r\n      trackCopy.name = tracks.current[trackClicked].name;\r\n      trackCopy.group = tracks.current[trackClicked].group;\r\n    }\r\n    return trackCopy;\r\n  });\r\n\r\n  return {\r\n    newGrid,\r\n    newTrackActive,\r\n    newTracksMute\r\n  };\r\n}\r\n\r\n/* This is a helper function specifically to fix the issue \r\nfor when a trackChannel prop is deleted, \r\nleaving the wrong key name for all props. \r\nBasically, every trackChannel prop gets a renamed key that coincides with their \"index value\" so to speak.\r\nFor example, {track0: Channel, track2: Channel, track3: Channel} \r\nbecomes {track0: Channel, track1: Channel, track2: Channel} */\r\nfunction renameKeys(obj) {\r\n  const keyValues = Object.keys(obj).map((key, index) => {\r\n    const newKey = \"track\" + index || key;\r\n    return { [newKey]: obj[key] };\r\n  });\r\n  return Object.assign({}, ...keyValues);\r\n}\r\n\r\nexport { handleUpdate, renameKeys };\r\n","import \"./sass/styles.scss\";\nimport React, { useState, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport * as Tone from \"tone\";\nimport {\n  bass1,\n  bd1,\n  bd2,\n  bd3,\n  bd4,\n  bd5,\n  bd6,\n  bd7,\n  bd8,\n  bd9,\n  bd10,\n  perc1,\n  perc2,\n  perc3,\n  patt1,\n  patt2,\n  patt3,\n  patt4\n} from \"./assets/rseq-sounds/index\";\nimport {\n  TrackBtnContainer,\n  TrackInfoPane,\n  StopIcon,\n  PlayIcon,\n  PlusIcon,\n  MinusIcon\n} from \"./components/TrackStyles\";\nimport { makeGrid, makeTracks, makePlayer } from \"./components/MakeFunctions\";\nimport {\n  TrackSelectButton,\n  TrackInfo,\n  TrackMuteButton,\n  SampleButton,\n  RepeatableBtn\n} from \"./components/Buttons\";\nimport { handleUpdate, renameKeys } from \"./components/HelperFunctions\";\n\nconst sampleRef = {\n  bass: { BS1: bass1 },\n  bd: {\n    BD1: bd1,\n    BD2: bd2,\n    BD3: bd3,\n    BD4: bd4,\n    BD5: bd5,\n    BD6: bd6,\n    BD7: bd7,\n    BD8: bd8,\n    BD9: bd9,\n    BD10: bd10\n  },\n  perc: { PC1: perc1, PC2: perc2, PC3: perc3 },\n  patt: { PT1: patt1, PT2: patt2, PT3: patt3, PT4: patt4 }\n};\n\nexport default function App() {\n  const [title, setTitle] = useState(\"Untitled 1\");\n\n  const wave = useRef();\n  if (!wave.current) wave.current = new Tone.Waveform();\n\n  const trackChannels = useRef();\n  if (!trackChannels.current)\n    trackChannels.current = {\n      track0: new Tone.Channel().toDestination().connect(wave.current), // This will connect the output of each track into wave in order to turn the audio into a Waveform object to extract its sample data for p5.js later on\n      track1: new Tone.Channel().toDestination().connect(wave.current),\n      track2: new Tone.Channel().toDestination().connect(wave.current),\n      track3: new Tone.Channel().toDestination().connect(wave.current)\n    };\n\n  const tracks = useRef();\n  if (!tracks.current)\n    tracks.current = [\n      {\n        group: \"bass\",\n        sample: makePlayer(sampleRef.bass.BS1).connect(\n          trackChannels.current.track0\n        ),\n        name: Object.keys(sampleRef.bass)[0]\n      },\n      {\n        group: \"bd\",\n        sample: makePlayer(sampleRef.bd.BD1).connect(\n          trackChannels.current.track1\n        ),\n        name: Object.keys(sampleRef.bd)[0]\n      },\n      {\n        group: \"perc\",\n        sample: makePlayer(sampleRef.perc.PC1).connect(\n          trackChannels.current.track2\n        ),\n        name: Object.keys(sampleRef.perc)[0]\n      },\n      {\n        group: \"patt\",\n        sample: makePlayer(sampleRef.patt.PT1).connect(\n          trackChannels.current.track3\n        ),\n        name: Object.keys(sampleRef.patt)[0]\n      }\n    ];\n  const [grid, setGrid] = useState(makeGrid(tracks.current));\n  const [tracksMute, setTracksMute] = useState(\n    makeTracks(tracks.current, true)\n  );\n  const [tracksSelect, setTracksSelect] = useState(\n    makeTracks(tracks.current, false)\n  );\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentColumn, setCurrentColumn] = useState(null);\n  const sequencer = useRef(null);\n  const [steps, setSteps] = useState(32); // I will eventually implement a feature to extend the amount of bars in the sequencer using this state\n  const seqSteps = Array(steps)\n    .fill(null)\n    .map((v, i) => i); // Creates an empty array with an array length of 16 and fills it with null to have something inside to map over and replace with an index number\n  let emptySeq = Array(steps)\n    .fill(null)\n    .map((v, i) => []);\n  /* We initialize the sequence to be an empty array with the variable \"steps\" amount of empty arrays inside so that\n  we can have the sequencer still run even if there are no pads pressed */\n  let sequence = useRef(emptySeq);\n  const [bpm, setBpm] = useState(Tone.Transport.bpm.value);\n\n  const handleTitleChange = (e) => {\n    setTitle(e.target.value);\n  };\n\n  // This is for the track buttons' styled components to have their colours dynamically consistent\n  const handleInputColor = (group) => {\n    if (group === \"bass\") {\n      return \"#dd0044\";\n    } else if (group === \"bd\") {\n      return \"#0074c6\";\n    } else if (group === \"perc\") {\n      return \"#dd4d00\";\n    } else if (group === \"patt\") {\n      return \"#008300\";\n    } else {\n      return \"black\";\n    }\n  };\n\n  const handleTrackSelectColor = (group) => {\n    if (group === \"bass\") {\n      return \"box-shadow: 9px 9px 18px #e03e6e, -9px -9px 18px #f8447a;\";\n    } else if (group === \"bd\") {\n      return \"box-shadow:  9px 9px 18px #4598d4, -9px -9px 18px #4da8ea;\";\n    } else if (group === \"perc\") {\n      return \"box-shadow:  9px 9px 18px #db753f, -9px -9px 18px #f28145;\";\n    } else if (group === \"patt\") {\n      return \"box-shadow:  9px 9px 18px #33b233, -9px -9px 18px #39c439;\";\n    } else {\n      return \"black\";\n    }\n  };\n\n  const handleBorderColor = (group) => {\n    if (group === \"bass\") {\n      return \"box-shadow: 1px 1px 2px #d10040, -1px -1px 2px #ff0056;\";\n    } else if (group === \"bd\") {\n      return \"box-shadow: 1px 1px 2px #006ebb, -1px -1px 2px #0094fd;\";\n    } else if (group === \"perc\") {\n      return \"box-shadow: 1px 1px 2px #d14900, -1px -1px 2px #ff6300;\";\n    } else if (group === \"patt\") {\n      return \"box-shadow: 1px 1px 2px #007c00, -1px -1px 2px #00a800;\";\n    } else {\n      return \"black\";\n    }\n  };\n\n  const handleTrackClick = (trackClicked, group) => {\n    let resetTrackActive = tracksSelect.map((track, trackIndex) => {\n      let trackCopy = { ...track };\n      if (trackCopy.isActive) {\n        trackCopy.isActive = false;\n      }\n      return trackCopy;\n    });\n    let newTracksSelect = resetTrackActive.map((track, trackIndex) => {\n      let trackCopy = { ...track };\n      if (trackIndex === trackClicked) {\n        trackCopy.isActive = !track.isActive;\n      }\n      return trackCopy;\n    });\n    setTracksSelect(newTracksSelect);\n  };\n\n  const handleSampleLeft = (name, group, trackClicked) => {\n    let newGrid, newTrackActive, newTracksMute, update;\n    const keys = Object.keys(sampleRef[group]);\n    const values = Object.values(sampleRef[group]);\n\n    if (keys.indexOf(name) > -1 && keys.indexOf(name) - 1 > -1) {\n      tracks.current[trackClicked] = {\n        group: group,\n        sample: makePlayer(values[keys.indexOf(name) - 1]).connect(\n          trackChannels.current[\"track\" + trackClicked]\n        ),\n        name: keys[keys.indexOf(name) - 1]\n      };\n\n      update = handleUpdate(\n        tracks,\n        grid,\n        tracksSelect,\n        tracksMute,\n        trackClicked\n      );\n      newGrid = update.newGrid;\n      newTrackActive = update.newTrackActive;\n      newTracksMute = update.newTracksMute;\n    } else {\n      tracks.current[trackClicked] = {\n        group: group,\n        sample: makePlayer(values[keys.length - 1]).connect(\n          trackChannels.current[\"track\" + trackClicked]\n        ),\n        name: keys[keys.length - 1]\n      };\n\n      update = handleUpdate(\n        tracks,\n        grid,\n        tracksSelect,\n        tracksMute,\n        trackClicked\n      );\n      newGrid = update.newGrid;\n      newTrackActive = update.newTrackActive;\n      newTracksMute = update.newTracksMute;\n    }\n\n    // Updates the sequence to be used for Tone.Sequence with the new sample from the updated grid\n    sequence.current = [];\n    newGrid.map((column) => {\n      let active = [];\n      column.map((cell) => {\n        return cell.isActive && active.push(cell.sample);\n      });\n      return sequence.current.push(active);\n    });\n\n    setGrid(newGrid);\n    setTracksSelect(newTrackActive);\n    setTracksMute(newTracksMute);\n  };\n\n  const handleSampleRight = (name, group, trackClicked) => {\n    let newGrid, newTrackActive, newTracksMute, update;\n    const keys = Object.keys(sampleRef[group]);\n    const values = Object.values(sampleRef[group]);\n\n    if (keys.indexOf(name) > -1 && keys.indexOf(name) + 1 < keys.length) {\n      tracks.current[trackClicked] = {\n        group: group,\n        sample: makePlayer(values[keys.indexOf(name) + 1]).connect(\n          trackChannels.current[\"track\" + trackClicked]\n        ),\n        name: keys[keys.indexOf(name) + 1]\n      };\n\n      update = handleUpdate(\n        tracks,\n        grid,\n        tracksSelect,\n        tracksMute,\n        trackClicked\n      );\n      newGrid = update.newGrid;\n      newTrackActive = update.newTrackActive;\n      newTracksMute = update.newTracksMute;\n    } else {\n      // This handles the case when you reach the end of the available samples to cycle through, in which the sample selection will be reset to the first sample\n      tracks.current[trackClicked] = {\n        group: group,\n        sample: makePlayer(values[0]).connect(\n          trackChannels.current[\"track\" + trackClicked]\n        ),\n        name: keys[0]\n      };\n\n      update = handleUpdate(\n        tracks,\n        grid,\n        tracksSelect,\n        tracksMute,\n        trackClicked\n      );\n      newGrid = update.newGrid;\n      newTrackActive = update.newTrackActive;\n      newTracksMute = update.newTracksMute;\n    }\n\n    // Updates the sequence to be used for Tone.Sequence with the new sample from the updated grid\n    sequence.current = [];\n    newGrid.map((column) => {\n      let active = [];\n      column.map((cell) => {\n        return cell.isActive && active.push(cell.sample);\n      });\n      return sequence.current.push(active);\n    });\n\n    setGrid(newGrid);\n    setTracksSelect(newTrackActive);\n    setTracksMute(newTracksMute);\n  };\n\n  const handleTrackMute = (trackClicked, group) => {\n    /* A copy of tracksMute is needed because we can't simply set tracks[trackClicked].isActive to its opposite value\n    as the state won't be saved and rendered, we would have to use setState, and when we use setState\n    we would have to make sure that we are providing a full copy of the tracks array with all updated objects inside returned */\n    let newTracksMute = tracksMute.map((track, trackIndex) => {\n      // This updates the cell info for each button to reflect whether they are muted or not\n      let trackCopy = { ...track };\n      if (trackIndex === trackClicked) {\n        trackCopy.isActive = !track.isActive;\n      }\n      return trackCopy;\n    });\n    trackChannels.current[\"track\" + trackClicked].mute = !trackChannels.current[\n      \"track\" + trackClicked\n    ].mute;\n    setTracksMute(newTracksMute);\n  };\n\n  // This is to switch a clicked sample's isActive property to true or false\n  const handleSampleClick = (columnClicked, sampleClicked, group) => {\n    /* A copy of grid is necessary because if we do setGrid then it will overwrite \n    the grid with just a value. We have to make sure grid is still kept while \n    doing setGrid, so in that case we would need a copy of grid with the updated \n    work done on it and then setGrid will have that inside */\n    let newGrid = grid.map((column, columnIndex) =>\n      column.map((cell, cellIndex) => {\n        let cellCopy = { ...cell };\n        if (columnIndex === columnClicked && cellIndex === sampleClicked) {\n          cellCopy.isActive = !cell.isActive;\n        }\n        return cellCopy;\n      })\n    );\n    sequence.current = [];\n    newGrid.map((column) => {\n      let active = [];\n      column.map((cell) => {\n        return cell.isActive && active.push(cell.sample);\n      });\n      return sequence.current.push(active);\n    });\n    setGrid(newGrid);\n  };\n\n  const handleGroupSelect = (selectedGroup, trackClicked) => {\n    let newGrid, newTrackActive, newTracksMute, update;\n\n    tracks.current[trackClicked] = {\n      group: selectedGroup,\n      sample: makePlayer(Object.values(sampleRef[selectedGroup])[0]).connect(\n        trackChannels.current[\"track\" + trackClicked]\n      ),\n      name: Object.keys(sampleRef[selectedGroup])[0]\n    };\n\n    update = handleUpdate(tracks, grid, tracksSelect, tracksMute, trackClicked);\n    newGrid = update.newGrid;\n    newTrackActive = update.newTrackActive;\n    newTracksMute = update.newTracksMute;\n\n    sequence.current = []; // I might have to turn this all into a function since the lines of code below are used more than once in this program\n    newGrid.map((column) => {\n      let active = [];\n      column.map((cell) => {\n        return cell.isActive && active.push(cell.sample);\n      });\n      return sequence.current.push(active);\n    });\n\n    setGrid(newGrid);\n    setTracksSelect(newTrackActive);\n    setTracksMute(newTracksMute);\n  };\n\n  const handleAddTrack = () => {\n    let newGrid, newTrackActive, newTracksMute;\n    // This adds a new channel to trackChannels\n    trackChannels.current[\n      \"track\" + Object.keys(trackChannels.current).length\n    ] = new Tone.Channel().toDestination().connect(wave.current);\n    // This adds a new track\n    tracks.current.push({\n      group: \"bass\",\n      sample: makePlayer(sampleRef.bass.BS1).connect(\n        trackChannels.current[\n          \"track\" + (Object.keys(trackChannels.current).length - 1)\n        ]\n      ),\n      name: Object.keys(sampleRef.bass)[0]\n    });\n    // This adds the 16 new cells for the new track\n    newGrid = grid.map((column) => {\n      let newColumn = [...column];\n      newColumn.push({\n        group: \"bass\",\n        sample: makePlayer(sampleRef.bass.BS1).connect(\n          trackChannels.current[\n            \"track\" + (Object.keys(trackChannels.current).length - 1)\n          ]\n        ),\n        name: Object.keys(sampleRef.bass)[0]\n      });\n      return newColumn;\n    });\n    // This adds a new tracksSelect object for the new Track in order for it to open up its additional controls when clicked\n    newTrackActive = [...tracksSelect];\n    newTrackActive.push({\n      isActive: false,\n      group: \"bass\",\n      name: Object.keys(sampleRef.bass)[0]\n    });\n    // This adds a new tracksMute object for the new Track in order for it to have a mute function\n    newTracksMute = [...tracksMute];\n    newTracksMute.push({\n      isActive: true,\n      group: \"bass\",\n      name: Object.keys(sampleRef.bass)[0]\n    });\n\n    setGrid(newGrid);\n    setTracksSelect(newTrackActive);\n    setTracksMute(newTracksMute);\n  };\n\n  const handleRemoveTrack = (trackClicked) => {\n    let newGrid, newTrackActive, newTracksMute;\n    // This removes the selected channel from trackChannels\n    delete trackChannels.current[\"track\" + trackClicked];\n    trackChannels.current = renameKeys(trackChannels.current);\n    // This removes the track\n    tracks.current.splice(trackClicked, 1);\n    // This adds the 16 new cells for the new track\n    newGrid = grid.map((column) => {\n      let newColumn = [...column];\n      newColumn.splice(trackClicked, 1);\n      return newColumn;\n    });\n    // This creates a copy of tracksSelect and removes a selected track\n    newTrackActive = [...tracksSelect];\n    newTrackActive.splice(trackClicked, 1);\n    // This removes a new tracksMute object on the selected track\n    newTracksMute = [...tracksMute];\n    newTracksMute.splice(trackClicked, 1);\n\n    sequence.current = [];\n    newGrid.map((column) => {\n      let active = [];\n      column.map((cell) => {\n        return cell.isActive && active.push(cell.sample);\n      });\n      return sequence.current.push(active);\n    });\n\n    setGrid(newGrid);\n    setTracksSelect(newTrackActive);\n    setTracksMute(newTracksMute);\n  };\n\n  const handleBpm = (addOrSub) => {\n    if (addOrSub) {\n      if (bpm < 999) {\n        setBpm((prevState) => prevState + 1);\n      }\n    } else {\n      if (bpm > 0) {\n        setBpm((prevState) => prevState - 1);\n      }\n    }\n    Tone.Transport.bpm.value = bpm;\n  };\n\n  const playMusic = async () => {\n    if (isPlaying) {\n      setIsPlaying(false);\n      setCurrentColumn(null);\n      await Tone.Transport.stop();\n      await sequencer.current.stop();\n      await sequencer.current.clear();\n      await sequencer.current.dispose();\n      return;\n    }\n    sequencer.current = new Tone.Sequence(\n      (time, columnIndex) => {\n        setCurrentColumn(columnIndex);\n        sequence.current[columnIndex].forEach((v) => {\n          return v.start(time, 0);\n        });\n      },\n      seqSteps,\n      \"16n\"\n    );\n    setIsPlaying(true);\n    await Tone.start();\n    await Tone.Transport.start();\n    await sequencer.current.start();\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"sequencer\">\n        <div id=\"upper-control-bar\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            id=\"title\"\n            value={title}\n            style={{ fontWeight: \"700\" }}\n            onChange={handleTitleChange}\n          />\n          <button\n            className=\"d-flex justify-content-center align-items-center btn btn-secondary\"\n            id={\"play-button\"}\n            onClick={() => playMusic()}\n          >\n            {isPlaying ? StopIcon : PlayIcon}\n          </button>\n          <div id=\"bpm-container\">\n            <p className=\"m-0\" id={\"bpm-title\"}>\n              BPM {bpm}\n            </p>\n            <div id={\"inc-dec-bpm-container\"}>\n              <RepeatableBtn\n                minusOrPlus={false}\n                onClick={handleBpm}\n                className={\"btn btn-dark btn-sm\"}\n                id={\"decrease-bpm\"}\n              >\n                {MinusIcon}\n              </RepeatableBtn>\n              <RepeatableBtn\n                minusOrPlus={true}\n                onClick={handleBpm}\n                className={\"btn btn-dark btn-sm\"}\n                id={\"increase-bpm\"}\n              >\n                {PlusIcon}\n              </RepeatableBtn>\n            </div>\n          </div>\n        </div>\n        <div id=\"sample-container\">\n          <TrackBtnContainer isTrackOrMute={true}>\n            {tracksSelect.map(({ sample, isActive, group }, trackIndex) => (\n              <TrackSelectButton\n                sample={sample}\n                group={group}\n                isActive={isActive}\n                inputColor={handleInputColor}\n                trackSelectColor={handleTrackSelectColor}\n                borderColor={handleBorderColor}\n                onClick={() => handleTrackClick(trackIndex, group)}\n                key={group + \"-track\" + trackIndex}\n                trackKey={trackIndex + 1}\n                handleRemoveTrack={handleRemoveTrack}\n                trackIndex={trackIndex}\n              />\n            ))}\n          </TrackBtnContainer>\n          <TrackBtnContainer className=\"me-3\">\n            {tracksMute.map(({ sample, isActive, group }, trackIndex) => (\n              <TrackMuteButton\n                sample={sample}\n                group={group}\n                isActive={isActive}\n                inputColor={handleInputColor}\n                borderColor={handleBorderColor}\n                onClick={() => handleTrackMute(trackIndex, group)}\n                key={group + \"-mute\" + trackIndex}\n              />\n            ))}\n          </TrackBtnContainer>\n          {grid.map((column, columnIndex) => (\n            <div\n              className={classNames(\"sample-column\", {\n                \"sample-column--active\": currentColumn === columnIndex\n              })}\n              key={\"sample-column\" + columnIndex}\n            >\n              {column.map(({ sample, isActive, group }, sampleIndex) => (\n                <SampleButton\n                  sample={sample}\n                  group={group}\n                  isActive={isActive}\n                  onClick={() =>\n                    handleSampleClick(columnIndex, sampleIndex, group)\n                  }\n                  key={group + \"-sample\" + sampleIndex}\n                />\n              ))}\n            </div>\n          ))}\n        </div>\n        <div className=\"d-grid gap-2\">\n          <button\n            className=\"d-flex justify-content-center align-items-center btn btn-secondary\"\n            id=\"add-track-button\"\n            onClick={() => handleAddTrack()}\n          >\n            {PlusIcon}\n          </button>\n        </div>\n        <TrackInfoPane>\n          {tracksSelect.map(({ isActive, group, name }, trackIndex) => (\n            <TrackInfo\n              name={name}\n              isActive={isActive}\n              group={group}\n              inputColor={handleInputColor}\n              key={group + trackIndex}\n              trackKey={trackIndex + 1}\n              wave={wave}\n              sampleLeft={() => handleSampleLeft(name, group, trackIndex)}\n              sampleRight={() => handleSampleRight(name, group, trackIndex)}\n              handleGroupSelect={handleGroupSelect}\n              trackIndex={trackIndex}\n            ></TrackInfo>\n          ))}\n        </TrackInfoPane>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}